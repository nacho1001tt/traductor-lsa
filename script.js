// script.js - Versi√≥n completa con manejo de .play().catch()
// Mantuvimos exactamente tus conjugaciones, rutas "Palabras/..." y la estructura.

document.addEventListener('DOMContentLoaded', () => {

  // --- Elementos del DOM ---
  const boton = document.getElementById('start');
  const texto = document.getElementById('texto');
  const videoSe√±a = document.getElementById('videoSe√±a');
  const videoSource = document.getElementById('videoSource');
  const entradaTexto = document.getElementById('entradaTexto');
  const speedControl = document.getElementById('speedControl'); // opcional
  const speedValue = document.getElementById('speedValue');     // opcional
  const contrastToggle = document.getElementById('contrastToggle'); // opcional

  // Verificaci√≥n m√≠nima
  if (!boton || !texto || !videoSe√±a || !videoSource || !entradaTexto) {
    console.error('Faltan elementos HTML requeridos (start, texto, videoSe√±a, videoSource, entradaTexto).');
    // no abortamos por completo para permitir pruebas parciales
  }

  // üîä Silenciar video para intentar permitir autoplay en navegadores que lo permiten
  try { videoSe√±a.muted = true; } catch(e){ /* noop */ }

  // Ocultar el video al inicio
  videoSe√±a.style.display = "none";

  // Velocidad por defecto
  const DEFAULT_SPEED = 0.75;
  if (speedControl) {
    if (!speedControl.value) speedControl.value = DEFAULT_SPEED;
    if (speedValue) speedValue.textContent = speedControl.value + "x";
    speedControl.addEventListener('input', () => {
      const s = parseFloat(speedControl.value) || DEFAULT_SPEED;
      videoSe√±a.playbackRate = s;
      if (speedValue) speedValue.textContent = s + "x";
    });
  } else {
    videoSe√±a.playbackRate = DEFAULT_SPEED;
  }

  // Toggle alto contraste (si existe)
  if (contrastToggle) {
    contrastToggle.addEventListener('click', () => {
      document.body.classList.toggle('high-contrast');
    });
  }

  // --- Reconocimiento de voz ---
  const Recon = window.SpeechRecognition || window.webkitSpeechRecognition;
  const reconocimiento = Recon ? new Recon() : null;
  if (!Recon) {
    console.warn('SpeechRecognition no disponible en este navegador. Solo entrada por texto funcionar√°.');
  } else {
    reconocimiento.lang = 'es-ES';
    reconocimiento.onstart = () => boton.classList.add('mic-active');
    reconocimiento.onend = () => boton.classList.remove('mic-active');

    reconocimiento.onresult = (event) => {
      try {
        const speechText = event.results[0][0].transcript.toLowerCase();
        mostrarTextoReconocido(speechText);
        procesarTextoSecuencial(speechText);
      } catch (err) {
        console.error('Error procesando resultado de reconocimiento:', err);
      }
    };
  }

  boton.addEventListener('click', () => {
    if (!reconocimiento) {
      alert('Reconocimiento de voz no disponible en este navegador.');
      return;
    }
    try { reconocimiento.start(); }
    catch (err) { console.error('No se pudo iniciar reconocimiento:', err); }
  });

  // Tecla Enter en input
  entradaTexto.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
      event.preventDefault();
      const userInput = entradaTexto.value.toLowerCase().trim();
      mostrarTextoReconocido(userInput);
      procesarTextoSecuencial(userInput);
    }
  });

  // --- Tus conjugaciones (id√©nticas a las que proporcionaste) ---
  const conjugaciones = {
    dialogar: [
        "dialogar", "dialogo", "dialog√°s", "dialogas", "dialoga", "dialogamos", "dialogan",
        "dialogu√©", "dialogaste", "dialog√≥", "dialogamos", "dialogaron",
        "dialogaba", "dialogabas", "dialog√°bamos", "dialogaban",
        "dialogar√©", "dialogar√°s", "dialogar√°", "dialogaremos", "dialogar√°n",
        "dialogar√≠a", "dialogar√≠as", "dialogar√≠amos", "dialogar√≠an",
        "dialogando", "dialogado", "dialogar√©", "he dialogado", "hemos dialogado", "han dialogado"
    ],
    hablar: [
        "hablar", "hablo", "habl√°s", "hablas", "habla", "hablamos", "hablan",
        "habl√©", "hablaste", "habl√≥", "hablamos", "hablaron",
        "hablaba", "hablabas", "habl√°bamos", "hablaban",
        "hablar√©", "hablar√°s", "hablar√°", "hablaremos", "hablar√°n",
        "hablar√≠a", "hablar√≠as", "hablar√≠amos", "hablar√≠an",
        "hablando", "hablado", "he hablado", "hemos hablado", "han hablado"
    ],
    decir: [
        "decir", "digo", "dec√≠s", "dices", "dice", "decimos", "dicen",
        "dije", "dijiste", "dijo", "dijimos", "dijeron",
        "dec√≠a", "dec√≠as", "dec√≠amos", "dec√≠an",
        "dir√©", "dir√°s", "dir√°", "diremos", "dir√°n",
        "dir√≠a", "dir√≠as", "dir√≠amos", "dir√≠an",
        "diciendo", "dicho", "he dicho", "hemos dicho", "han dicho"
    ],
    contar: [
        "contar", "cuento", "cont√°s", "contas", "cuenta", "contamos", "cuentan",
        "cont√©", "contaste", "cont√≥", "contamos", "contaron",
        "contaba", "contabas", "cont√°bamos", "contaban",
        "contar√©", "contar√°s", "contar√°", "contaremos", "contar√°n",
        "contar√≠a", "contar√≠as", "contar√≠amos", "contar√≠an",
        "contando", "contado", "he contado", "hemos contado", "han contado"
    ],
    narrar: [
        "narrar", "narro", "narr√°s", "narras", "narra", "narramos", "narran",
        "narr√©", "narraste", "narr√≥", "narramos", "narraron",
        "narraba", "narrabas", "narr√°bamos", "narraban",
        "narrar√©", "narrar√°s", "narrar√°", "narraremos", "narrar√°n",
        "narrando", "narrado", "he narrado", "hemos narrado", "han narrado"
    ],
    explicar: [
        "explicar", "explico", "explic√°s", "explicas", "explica", "explicamos", "explican",
        "expliqu√©", "explicaste", "explic√≥", "explicamos", "explicaron",
        "explicaba", "explicabas", "explic√°bamos", "explicaban",
        "explicar√©", "explicar√°s", "explicar√°", "explicaremos", "explicar√°n",
        "explicando", "explicado", "he explicado", "hemos explicado", "han explicado"
    ],
    estar: [
        "estar", "estoy", "est√°s", "est√°", "estamos", "est√°n",
        "estuve", "estuviste", "estuvo", "estuvimos", "estuvieron",
        "estaba", "estabas", "est√°bamos", "estaban",
        "estar√©", "estar√°s", "estar√°", "estaremos", "estar√°n",
        "estando", "estado", "he estado", "hemos estado", "han estado"
    ]
  };

  // Palabras fijas
  const palabrasFijas = {
    "lengua oral": "Lengua oral",
    si: "Si",
    no: "No",
    negar: "Negar",
    tambi√©n: "Tambien",
    tampoco: "Tampoco",
    yo: "Yo",
    vos: "Vos",
    ustedes: "Ustedes",
    "el": "El o Ella",
    "ella": "El o Ella",
    "nosotros": "Nosotros o Nosotras",
    "nosotras": "Nosotros o Nosotras"
  };

  // --- Funciones auxiliares ---
  function mostrarTextoReconocido(str) {
    texto.textContent = str || '';
    texto.classList.add('glow');
    setTimeout(() => texto.classList.remove('glow'), 900);
  }

  // --- Procesar texto y armar lista de videos ---
  function procesarTextoSecuencial(text) {
    if (!text || !text.trim()) {
      console.log('Texto vac√≠o - nada que reproducir.');
      return;
    }

    // separar por espacios/puntuaci√≥n
    const palabras = text.split(/[\s,;?.!¬°¬ø]+/).filter(Boolean);
    const videosAReproducir = [];

    // para detecciones de frases
    const fraseLower = text.toLowerCase();

    for (let palabra of palabras) {
      palabra = palabra.trim().toLowerCase();
      if (!palabra) continue;

      // Frases y expresiones (prioritarias)
      if (palabra === "hola") {
        videosAReproducir.push("Palabras/hola.mp4");
        continue;
      }
      if (fraseLower.includes("como estas") || fraseLower.includes("c√≥mo est√°s")) {
        if (!videosAReproducir.includes("Palabras/comoestas.mp4")) videosAReproducir.push("Palabras/comoestas.mp4");
      }
      if (fraseLower.includes("vos c√≥mo te llamas") || fraseLower.includes("c√≥mo te llamas")) {
        if (!videosAReproducir.includes("Palabras/comotellamas.mp4")) videosAReproducir.push("Palabras/comotellamas.mp4");
      }
      if (fraseLower.includes("me llamo luana")) {
        if (!videosAReproducir.includes("Palabras/llamoluana.mp4")) videosAReproducir.push("Palabras/llamoluana.mp4");
      }

      // Letras
      const letras = ["a","b","c","d","e","f","g","h","i","j","k","l","ll","m","n","√±","o","p","q","r","s","t","u","v","w","x","y","z","ch"];
      if (letras.includes(palabra)) {
        videosAReproducir.push(`Palabras/letra${palabra.toUpperCase()}.mp4`);
        continue;
      }

      // Conjugaciones / verbos
      let encontrado = false;
      for (let verbo in conjugaciones) {
        if (conjugaciones[verbo].includes(palabra)) {
          const nombreArchivo = (verbo === "contar" || verbo === "narrar") ? "Contar o Narrar" : verbo.charAt(0).toUpperCase() + verbo.slice(1);
          videosAReproducir.push(`Palabras/${nombreArchivo}.mp4`);
          encontrado = true;
          break;
        }
      }
      if (encontrado) continue;

      // Palabras fijas sueltas
      for (let fija in palabrasFijas) {
        if (palabra === fija) {
          videosAReproducir.push(`Palabras/${palabrasFijas[fija]}.mp4`);
          break;
        }
      }
    } // end for

    if (videosAReproducir.length === 0) {
      console.log('No se encontr√≥ video para las palabras ingresadas.');
      videoSe√±a.style.display = "none";
      return;
    }

    reproducirSecuencialmente(videosAReproducir);
  }

  // --- Reproducci√≥n secuencial con .play().catch(...) ---
  function reproducirSecuencialmente(lista) {
    if (!Array.isArray(lista) || lista.length === 0) {
      videoSe√±a.style.display = "none";
      return;
    }

    const path = lista.shift();
    console.log('Reproduciendo:', path);

    // actualizar fuente
    videoSource.src = path;

    // cargar
    try { videoSe√±a.load(); } catch (err) { console.warn('video.load() dio error:', err); }

    // mostrar el video (para que el usuario pueda darle play manual si es necesario)
    videoSe√±a.style.display = "block";

    // ajustar velocidad
    const velocidad = speedControl ? parseFloat(speedControl.value) || DEFAULT_SPEED : DEFAULT_SPEED;
    videoSe√±a.playbackRate = velocidad;

    // si ocurre error en la carga, pasar al siguiente
    videoSe√±a.onerror = (ev) => {
      console.error('Error cargando el video:', ev);
      setTimeout(() => reproducirSecuencialmente(lista), 250);
    };

    // cuando termine, reproducir siguiente despu√©s del delay
    const DELAY_MS = 100;
    videoSe√±a.onended = () => {
      setTimeout(() => reproducirSecuencialmente(lista), DELAY_MS);
    };

    // Intentar reproducir y capturar rechazo (autoplay policies)
    const playPromise = videoSe√±a.play();
    if (playPromise !== undefined) {
      playPromise
        .then(() => {
          // reproducci√≥n iniciada correctamente
          console.log('play() OK:', path);
        })
        .catch((err) => {
          console.warn('play() rechazado por el navegador (autoplay):', err);
          // dejar video cargado y visible para que el usuario pulse "play" manualmente:
          texto.innerHTML = `No se pudo reproducir autom√°ticamente el video. Hac√© click en el bot√≥n "Reproducir" del video para continuar.`;
          // el video ya est√° cargado (videoSource.src), permanecer√° visible en pausa
          try { videoSe√±a.pause(); } catch(e){/* noop */ }
          // NO avanzar autom√°ticamente ‚Äî se esperar√° a que el usuario pulse play
        });
    }
  }

  // --- Exponer funciones para debug si quer√©s desde consola ---
  window._procesarTexto = procesarTextoSecuencial;
  window._reproducir = reproducirSecuencialmente;
  window._conjugaciones = conjugaciones;

}); // end DOMContentLoaded
